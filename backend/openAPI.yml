openapi: 3.0.0

servers:
  - description: Development server URL
    url: http://127.0.0.1:3333/

info:
  description: HTTP Requests guide to utilize the ReservaLab API.
  version: "1.0.0"
  title: ReservaLab API

tags:
  - name: authentication
  - name: users
  # - name: laboratories
  - name: appointments

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    positionHeader:
      type: apiKey
      in: header
      name: user_position
  responses:
    UnauthorizedError:
      description: JWT token | User position is missing
    IncorrectToken:
      description: Invalid JWT token
    ExclusiveAccess:
      description: Exclusive for specific user position
  schemas:
    User:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        position:
          type: string
        subjects:
          type: string
        avatar:
          type: string
          format: binary
        password:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    # Laboratory:
    #   properties:
    #     id:
    #       type: string
    #       format: uuid
    #     name:
    #       type: string
    #     number:
    #       type: number
    #     created_at:
    #       type: string
    #       format: dateformat
    #     updated_at:
    #       type: string
    #       format: dateformat
    Appointment:
      properties:
        id:
          type: string
          format: uuid
        teacher_id:
          type: string
          format: uuid
        laboratory_id:
          type: string
          format: uuid
        year:
          type: number
        month:
          type: number
        day:
          type: number
        time:
          type: string
        subject:
          type: string
        classroom:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat

paths:
  /sessions:
    post:
      summary: Creates an user session.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  email:
                    type: string
                    example: "user@email.com"
                  password:
                    type: string
                    example: "user password"
      responses:
        '200':
          description: Returns a JSON containing the User data and a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                      name:
                        type: string
                        example: "User Name"
                      email:
                        type: string
                        format: email
                        example: "User@email.com"
                      position:
                        type: string
                        example: "teacher"
                      subjects:
                        type: string
                        example: "Subject 1, Subject 2"
                      avatar_url:
                        type: string
                        example: null
                      created_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                      updated_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTcxMTQ0MDgsImV4cCI6MTU5NzIwMDgwOCwic3ViIjoiMWEwMWY3ZmYtYzZlMy00M2NiLThiNzQtY2YxOWVhZDYyMDdhIn0.P_NlcLb0Ob6j9pC6DxDJiF2q7Xrx6qqWkgOcUgqCpro"
        '401':
          description: 'Incorrect login/password combination.'
  /password/forgot:
    post:
      summary: Generates a token for password recovering.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@email.com"
      responses:
        '204':
          description: Confirmation of token sent to email successfully.
        '400':
          description: User does not exists.
  /password/reset:
    post:
      summary: Resets the user password.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "new user password"
                password_confirmation:
                  type: string
                  example: "new user password"
                token:
                  type: string
                  format: uuid
                  example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
      responses:
        '204':
          description: Confirmation of user password changed successfully.
        '400':
          description: Token expired | User token doesn't not exists.

  /users:
    post:
      summary: Creates an user.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "user Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  password:
                    type: string
                    example: "user password"
      responses:
        '200':
          description: Returns a JSON containing the created user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "User Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  avatar_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
    put:
      summary: Updates the user.
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "New User Name"
                  email:
                    type: string
                    format: email
                    example: "newuser@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  password:
                    type: string
                    example: "new user password"
      responses:
        '200':
          description: Returns a JSON containing the updated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New User Name"
                  email:
                    type: string
                    format: email
                    example: "newuser@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  avatar_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes the user.
      tags:
        - users
      security:
        - bearerAuth: []
        - positionHeader: []
      responses:
        '200':
          description: Returns a successfully deleted user confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
    get:
      summary: Gets the authenticated user.
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON containing the user data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "User Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  avatar_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/avatar:
    patch:
      summary: Updates the user avatar.
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Returns a JSON containing the updated user with avatar data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New User Name"
                  email:
                    type: string
                    format: email
                    example: "newuser@email.com"
                  position:
                    type: string
                    example: "teacher"
                  subjects:
                    type: string
                    example: "Subject 1, Subject 2"
                  avatar_url:
                    type: string
                    example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # /laboratories:
  #   post:
  #     summary: Creates a laboratory.
  #     tags:
  #       - laboratories
  #     security:
  #       - bearerAuth: []
  #       - positionHeader: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 name:
  #                   type: string
  #                   example: "Laboratory Name"
  #                 number:
  #                   type: number
  #                   example: 1
  #     responses:
  #       '200':
  #         description: Returns a JSON containing the created laboratory.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   format: uuid
  #                   example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
  #                 name:
  #                   type: string
  #                   example: "Laboratory Name"
  #                 number:
  #                   type: number
  #                   example: 1
  #                 created_at:
  #                   type: string
  #                   format: dateformat
  #                   example: "2020-07-02T21:57:00.421Z"
  #                 updated_at:
  #                   type: string
  #                   format: dateformat
  #                   example: "2020-07-02T21:57:00.421Z"
  #       '400':
  #         $ref:  '#/components/responses/IncorrectToken'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #       '403':
  #         $ref: '#/components/responses/ExclusiveAccess'
  # /laboratories/{id}:
  #   put:
  #     summary: Updates a laboratory.
  #     parameters:
  #       - in: path
  #         name: id
  #         schema:
  #           type: string
  #           format: uuid
  #           example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
  #         required: true
  #         description: Laboratory id to update it.
  #     tags:
  #       - laboratories
  #     security:
  #       - bearerAuth: []
  #       - positionHeader: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 name:
  #                   type: string
  #                   example: "Laboratory Name"
  #                 number:
  #                   type: number
  #                   example: 1
  #     responses:
  #       '200':
  #         description: Returns a JSON containing the updated laboratory.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   format: uuid
  #                   example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
  #                 name:
  #                   type: string
  #                   example: "Laboratory Name"
  #                 number:
  #                   type: number
  #                   example: 1
  #                 created_at:
  #                   type: string
  #                   format: dateformat
  #                   example: "2020-07-02T21:57:00.421Z"
  #                 updated_at:
  #                   type: string
  #                   format: dateformat
  #                   example: "2020-07-02T21:57:00.421Z"
  #       '400':
  #         $ref:  '#/components/responses/IncorrectToken'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #       '403':
  #         $ref: '#/components/responses/ExclusiveAccess'
  #   delete:
  #     summary: Deletes a laboratory.
  #     parameters:
  #       - in: path
  #         name: id
  #         schema:
  #           type: string
  #           format: uuid
  #           example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
  #         required: true
  #         description: Laboratory id to delete it.
  #     tags:
  #       - laboratories
  #     security:
  #       - bearerAuth: []
  #       - positionHeader: []
  #     responses:
  #       '200':
  #         description: Returns a successfully deleted laboratory confirmation.
  #       '400':
  #         $ref:  '#/components/responses/IncorrectToken'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #       '403':
  #         $ref: '#/components/responses/ExclusiveAccess'
  # /laboratories/all:
  #   get:
  #     summary: Gets all laboratories.
  #     tags:
  #       - laboratories
  #     parameters:
  #       - in: query
  #         name: search
  #         schema:
  #           type: string
  #         description: A string to search for specific laboratories.
  #       - in: query
  #         name: page
  #         schema:
  #           type: number
  #         description: A number to control the laboratories pagination.
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Returns a JSON array containing all laboratories.
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   id:
  #                     type: string
  #                     format: uuid
  #                     example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
  #                   name:
  #                     type: string
  #                     example: "Laboratory Name"
  #                   number:
  #                     type: number
  #                     example: 1
  #                   created_at:
  #                     type: string
  #                     format: dateformat
  #                     example: "2020-07-02T21:57:00.421Z"
  #                   updated_at:
  #                     type: string
  #                     format: dateformat
  #                     example: "2020-07-02T21:57:00.421Z"
  #       '400':
  #         $ref:  '#/components/responses/IncorrectToken'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'

  /appointments:
    post:
      summary: Creates an appointment.
      tags:
        - appointments
      security:
        - bearerAuth: []
        - positionHeader: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  laboratory_number:
                    type: number
                    example: 1
                  time:
                    type: string
                    example: "1, 2"
                  year:
                    type: number
                    example: 2020
                  month:
                    type: number
                    example: 9
                  day:
                    type: number
                    example: 2
                  subject:
                    type: string
                    example: "Subject Name"
                  classroom:
                    type: string
                    example: "Classroom 1"
      responses:
        '200':
          description: Returns a JSON containing the created appointment.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  teacher_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  laboratory_number:
                    type: number
                    example: 1
                  time:
                    type: string
                    example: "1, 2"
                  year:
                    type: number
                    example: 2020
                  month:
                    type: number
                    example: 9
                  day:
                    type: number
                    example: 2
                  subject:
                    type: string
                    example: "Subject Name"
                  classroom:
                    type: string
                    example: "Classroom 1"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
  /appointments/{id}:
    put:
      summary: Updates an appointment.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Appointment id to update it.
      tags:
        - appointments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  teacher_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  laboratory_number:
                    type: number
                    example: 1
                  time:
                    type: string
                    example: "1, 2"
                  year:
                    type: number
                    example: 2020
                  month:
                    type: number
                    example: 9
                  day:
                    type: number
                    example: 2
                  subject:
                    type: string
                    example: "Subject Name"
                  classroom:
                    type: string
                    example: "Classroom 1"
      responses:
        '200':
          description: Returns a JSON containing the updated appointment.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  teacher_id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  laboratory_number:
                    type: number
                    example: 1
                  time:
                    type: string
                    example: "1, 2"
                  year:
                    type: number
                    example: 2020
                  month:
                    type: number
                    example: 9
                  day:
                    type: number
                    example: 2
                  subject:
                    type: string
                    example: "Subject Name"
                  classroom:
                    type: string
                    example: "Classroom 1"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes an appointment.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Appointment id to delete it.
      tags:
        - appointments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted appointment confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /appointments/all:
    get:
      summary: Gets all appointments by date.
      tags:
        - appointments
      parameters:
        - in: query
          name: year
          schema:
            type: number
          description: A number to reference the year for searching.
        - in: query
          name: month
          schema:
            type: number
          description: A number to reference the month for searching.
        - in: query
          name: day
          schema:
            type: number
          description: A number to reference the day for searching.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all appointments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    teacher_id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    laboratory_number:
                      type: number
                      example: 1
                    time:
                      type: string
                      example: "1, 2"
                    year:
                      type: number
                      example: 2020
                    month:
                      type: number
                      example: 9
                    day:
                      type: number
                      example: 2
                    subject:
                      type: string
                      example: "Subject Name"
                    classroom:
                      type: string
                      example: "Classroom 1"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /appointments/clean/{operation}:
    delete:
      summary: Deletes the appointments.
      parameters:
        - in: path
          name: operation
          schema:
            type: string
            example: "old"
          required: true
          description: String to manage the deletion operation.
      tags:
        - appointments
      security:
        - bearerAuth: []
        - positionHeader: []
      responses:
        '200':
          description: Returns a successfully deleted appointments confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
